/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fullhouse;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Raymond
 */
public class Masterclass extends javax.swing.JFrame {

    /**
     * Creates new form Masterclass
     */
    public Masterclass() {
        initComponents();
        vulMasterClassTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jt_masterclass = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jt_masterclass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jt_masterclass);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    private void vulMasterClassTable() {
        try {
            DefaultTableModel datamodel = createMasterclassModel();
            this.jt_masterclass.setModel(datamodel);

            String query = "SELECT m.m_code, naam, p.achternaam, m.beschikbare_plaatsen, datum, minimumRating " +
                           "FROM persoon p JOIN docent d ON p.p_code = d.persoon " +
                           "LEFT OUTER JOIN masterclass m ON d.d_code = m.docent;";
            Connection connection = DatabaseConnectie.getConnection();
            PreparedStatement statement = connection.prepareStatement(query);
            
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                int mCode = results.getInt("m.m_code");
                String naamToernooi = results.getString("naam");
                String naamDocent = results.getString("p.achternaam");
                int plaatsen = results.getInt("m.beschikbare_plaatsen");
                String datum = results.getString("datum");
                int minimumRating = results.getInt("minimumRating");
                Object[] rij = {mCode, naamToernooi, naamDocent, plaatsen, datum, minimumRating};
                datamodel.addRow(rij);

            }
        } catch (SQLException ex) {
            Logger.getLogger(Masterclass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private DefaultTableModel createMasterclassModel() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Masterclass code");
        model.addColumn("Naam class");
        model.addColumn("Docent");
        model.addColumn("Datum");
        model.addColumn("Aantal plaatsen");
        model.addColumn ("Benodigde rating");
        return model;
    }
    
    public void inschrijvenMasterclass(int code, String voornaam, String achternaam) {
        try {
            String querySelect = "select p.p_code from persoon p left outer join docent on p_code = persoon where voornaam like ? and achternaam like ?;";
            Connection connection = DatabaseConnectie.getConnection();
            PreparedStatement statement = connection.prepareStatement(querySelect);
            
            statement.setString(1, voornaam);
            statement.setString(2, achternaam);
            
            ResultSet results = statement.executeQuery();
            if (results.next()) {
            
                InputStream stream = results.getBinaryStream(1);
            }
            String pCode = results.getString("p.p_code");
            System.out.println(pCode);
            
            String queryInsert = "insert into masterclass_inschrijvingen(persoon_code, masterclass_code) " +
                                 "values(?, ?);";
            PreparedStatement statement2 = connection.prepareStatement(queryInsert);
            
            statement2.setString(1, pCode);
            statement2.setInt(2, code);
            statement2.execute();       
            
            
            String queryInsert2 = "update masterclass set beschikbare_plaatsen where m_code = ? ";
            PreparedStatement statement3 = connection.prepareStatement(queryInsert2);
            
        } catch (SQLException ex) {
            Logger.getLogger(Masterclass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Masterclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Masterclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Masterclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Masterclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */


        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Masterclass().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jt_masterclass;
    // End of variables declaration//GEN-END:variables
}
